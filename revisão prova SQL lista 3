Lista 3:
1. Selecionar por país, o número de empregados que trabalham em lojas
desse país, ordenado alfabeticamente pelo país.
select country, sum(num) from (
select store.country, 1 as num
from staff, store
where staff.store_id=store.store_id
UNION ALL
select country, 0 from store where store_id not in (
select store_id from staff)
) as temp group by country order by country asc;
2. Selecionar por título de filme, o número de DVDs que dele existem,
ordenado alfabeticamente pelo título.
select title, sum(num) from(
select title, 1 as num from film natural join inventory
UNION ALL
select title, 0 as num from film
where film_id not in (select film_id from inventory)
) as temp group by title order by title asc;
3. Selecionar o título dos filmes em que participa o actor 'HARRISON BALE'
que já tiveram mais do que 20 alugueres, ordenado alfabeticamente pelo
título.
select title from film where film_id in
(select film_id from film natural join
film_actor natural join actor
where first_name = 'HARRISON' and last_name = 'BALE')
and film_id in (
select film_id from film natural join inventory natural join rental
group by film_id having count(film_id)>20)
order by title asc ;
4. Selecionar o título dos filmes dos quais há mais DVDs, ordenado
alfabeticamente pelo título.
select title from film natural join inventory
group by 1
having count(inventory_id) = (select count(inventory_id)
from inventory
group by film_id
order by 1 desc limit 1)
order by 1;
5. Selecionar o primeiro e último nome dos clientes que já fizeram
devoluções tardias, ordenado alfabeticamente pelo primeiro e último
nome.
select first_name, last_name from (
select distinct first_name, last_name, customer_id from customer natural
join rental natural join inventory natural join film
where return_date > rent_date + rental_duration
or (return_date is null and datediff(now(), rent_date ) >
rental_duration)
order by 1,2) as tmp1;
6. Selecionar por nome de categoria, o número médio de atores por filme
dessa categoria, ordenado alfabeticamente pelo nome.
select name, avg(c) from category natural join (
select film_id, category_id , count(actor_id) as c from film natural left
join film_actor group by 1,2
union all
select NUll as film_id, category_id, 0 as c from category where
category_id not in (select category_id from film natural left join
film_actor)
) as tmp
group by 1 order by 1;
ou
SELECT name, IFNULL(AVG(length),0) AS average
FROM category
NATURAL LEFT JOIN film
GROUP BY category.category_id
7. Selecionar os pares de actores (primeiro e último nome de cada ator) que
mais vezes contracenaram juntos, ordenado alfabeticamente pelo
primeiro e último de ambos os atores.
SELECT a.first_name, a.last_name, b.first_name, b.last_name
FROM ((SELECT *
FROM actor NATURAL JOIN film_actor) AS a
JOIN
(SELECT *
FROM actor NATURAL JOIN film_actor) AS b
ON a.film_id=b.film_id AND a.actor_id<b.actor_id)
GROUP BY a.actor_id, b.actor_id
HAVING COUNT(a.film_id)=(SELECT MAX(c)
FROM (SELECT a.first_name AS af, a.last_name AS al,
b.first_name AS bf, b.last_name AS bl, COUNT(a.film_id) AS c
FROM ((SELECT *
FROM actor NATURAL JOIN film_actor) AS a
JOIN
(SELECT *
FROM actor NATURAL JOIN film_actor) AS b
ON a.film_id=b.film_id AND a.actor_id<b.actor_id)
GROUP BY a.actor_id, b.actor_id) AS t)
ORDER BY 1,2,3,4;
